function [ax,ay,t_sel,xmesh,ymesh,xmesh_old,ymesh_old]=My_Get_Accelaration_centr_diff(xmesh,ymesh,data_u,data_v,delta_t,frame_step,tracking_step,itera_num)
% this code caculate the material accelaration of a velocity field using material derivatives.
% xmesh,ymesh are the mesh coordinates generated by meshgrid; 
% data_u,data_v are velocity components in two directions;
% delta_t is the time interval between two snapshots;
% frame_step is the step used to down sample the acceleration,for example if set to 2 (the defaut value is 1), the returned ax and ay has half the snapshots of data_u;
% tracking_step is used to ajust the time interval when copmuting the acceleration (the defaut value is 1);
% itera_num is the iteration number used in tracking the virtual particles (the defaut value is 3);
% ax,ay are the acceleration components in two directions;
% t_sel is the down sampled time points(frame sequence) at which the acceleration has been caculated
% written by Songze Li on Apr 10th,2013;


if nargin<8
    itera_num=3;
    if nargin<7
        tracking_step=1;
        if nargin<6
           frame_step=1;
        end
    end
end
delta_t=delta_t*tracking_step;

if itera_num<2
    errordlg('the iteration number should be at least two!');
    error('the iteration number should be at least two!');
end
% if frame_step<tracking_step
%     warndlg('frame_step should not be less than tracking_step!')
% end

t_sel=(1:frame_step:size(data_u,3)-2*tracking_step)+tracking_step;


xmesh_old=xmesh;
ymesh_old=ymesh;
% delta_x=(xmesh(1,2)-xmesh(1,1))/2;% need to be revised
% delta_y=(ymesh(1,1)-ymesh(2,1))/2;
% xvector=xmesh(1,1):delta_x:xmesh(1,end);
% yvector=ymesh(1,1):-delta_y:ymesh(end,1);
% [xmesh,ymesh]=meshgrid(xvector,yvector);

ax=zeros([size(xmesh),length(t_sel)]);
ay=zeros([size(xmesh),length(t_sel)]);
data_u_temp=zeros([size(xmesh),3]);
data_v_temp=zeros([size(xmesh),3]);
count=1;
for kk=1:frame_step:size(data_u,3)-2*tracking_step
    str=sprintf('%s',['computing ',num2str(kk),'th frame in the sequence: ',num2str(count),' out of a total of ',num2str(length(t_sel)),' instants']);
    disp(str);
    for ii=1:3
        data_u_temp(:,:,ii)=interp2(xmesh_old,ymesh_old,data_u(:,:,kk+(ii-1)*tracking_step),xmesh,ymesh,'linear');
        data_v_temp(:,:,ii)=interp2(xmesh_old,ymesh_old,data_v(:,:,kk+(ii-1)*tracking_step),xmesh,ymesh,'linear');
    end
    clear xtrail ytrail Utrail Vtrail Ua Va;
    [xtrail,ytrail,Utrail,Vtrail]=my_Get_Convpos_specific(xmesh,ymesh,data_u_temp,data_v_temp,delta_t,3,itera_num);
    
    ax(:,:,count)=(-Utrail(:,:,1)+Utrail(:,:,3))/(2*delta_t);
    ay(:,:,count)=(-Vtrail(:,:,1)+Vtrail(:,:,3))/(2*delta_t);
    
    ax(:,:,count)=griddata(xtrail(:,:,2),ytrail(:,:,2),ax(:,:,count),xmesh,ymesh);
    ay(:,:,count)=griddata(xtrail(:,:,2),ytrail(:,:,2),ay(:,:,count),xmesh,ymesh);
    count=count+1;
end
end

function [xtrail,ytrail,Utrail,Vtrail,Ua,Va]=my_Get_Convpos_specific(xmesh,ymesh,data_u,data_v,delta_t,pos_num,itera_num)

if nargin<7
    itera_num=3;
end
if nargin<6
    pos_num=3;
    itera_num=3;
end
xtrail=zeros(size(xmesh,1),size(xmesh,2),pos_num);
ytrail=zeros(size(xmesh,1),size(xmesh,2),pos_num);
Utrail=zeros(size(xmesh,1),size(xmesh,2),pos_num);
Vtrail=zeros(size(xmesh,1),size(xmesh,2),pos_num);
Ua=zeros(size(xmesh,1),size(xmesh,2),pos_num-1);
Va=zeros(size(xmesh,1),size(xmesh,2),pos_num-1);
for kk=1:pos_num
    if kk==1
       xtrail(:,:,1)=xmesh;
       ytrail(:,:,1)=ymesh;
       Utrail(:,:,1)=data_u(:,:,1);
       Vtrail(:,:,1)=data_v(:,:,1);
    else 
        [x2,y2,U2,V2,Ua_temp,Va_temp]=my_Convpos(xmesh,ymesh,data_u(:,:,kk-1:kk),data_v(:,:,kk-1:kk),...
            reshape(xtrail(:,:,kk-1),[],1),reshape(ytrail(:,:,kk-1),[],1),delta_t,itera_num);
        xtrail(:,:,kk)=reshape(x2,size(xmesh));
        ytrail(:,:,kk)=reshape(y2,size(xmesh));
        Utrail(:,:,kk)=reshape(U2,size(xmesh));
        Vtrail(:,:,kk)=reshape(V2,size(xmesh));
        Ua(:,:,kk-1)=reshape(Ua_temp,size(xmesh));
        Va(:,:,kk-1)=reshape(Va_temp,size(xmesh));        
    end
end
end

function [x2,y2,U2,V2,Ua,Va]=my_Convpos(xmesh,ymesh,data_u,data_v,x1,y1,delta_t,itera_num)

if nargin<8
    itera_num=5;
end

if length(x1)~=length(y1)
    errordlg('x1 and y1 must have the same length!')
    error('x1 and y1 must have the same length!')
end
U1=zeros(length(x1),1);
V1=zeros(length(x1),1);
x2=zeros(length(x1),1);
y2=zeros(length(x1),1);
U2=zeros(length(x1),1);
V2=zeros(length(x1),1);
Ua=zeros(length(x1),1);
Va=zeros(length(x1),1);
xmin=min(xmesh(1,:));xmax=max(xmesh(1,:));
ymin=min(ymesh(:,1));ymax=max(ymesh(:,1));
for ii=1:length(x1)
    U1(ii)=interp2(xmesh,ymesh,data_u(:,:,1),x1(ii),y1(ii),'linear');
    V1(ii)=interp2(xmesh,ymesh,data_v(:,:,1),x1(ii),y1(ii),'linear');
    for ll=1:itera_num
        if ll==1
            Ua(ii)=U1(ii);
            Va(ii)=V1(ii);
            xx=x1(ii);
            yy=y1(ii);
        end
        x_temp=xx+Ua(ii)*delta_t;
        y_temp=yy+Va(ii)*delta_t;
        if x_temp<xmin
            x_temp=xmin;
        elseif x_temp>xmax
            x_temp=xmax;
        end
        if y_temp<ymin
            y_temp=ymin;
        elseif y_temp>ymax
            y_temp=ymax;
        end
        U2(ii)=interp2(xmesh,ymesh,data_u(:,:,2),x_temp,y_temp,'linear');
        V2(ii)=interp2(xmesh,ymesh,data_v(:,:,2),x_temp,y_temp,'linear');
        Ua(ii)=(U1(ii)+U2(ii))/2;
        Va(ii)=(V1(ii)+V2(ii))/2;
        x2(ii)=x_temp;
        y2(ii)=y_temp;
    end
end
end